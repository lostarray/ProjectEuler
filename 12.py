# Highly divisible triangular number
# Problem 12

# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#         1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

# Answer: 76576500

from operator import mul


def triangle_number():
    t, n = 0, 1
    while True:
        t, n = t + n, n + 1
        yield t


def num_of_divisors(num):
    if num == 1:
        return 1
    count = {}
    n, i = num, 2
    while i <= n/2:
        if n % i == 0:
            count[i] = count[i] + 1 if i in count else 1
            n /= i
        else:
            i += 1
    if n != 1:
        count[n] = count[n] + 1 if n in count else 1
    return reduce(mul, map(lambda x: x + 1, count.values()))


if __name__ == '__main__':
    for num in triangle_number():
        if num_of_divisors(num) > 500:
            print(num)
            break
